0.1
--------------------------------------------
* First prototype version of DB packager


Changes from 0.1 to 0.2
--------------------------------------------
* Completely different approach. Codes now may interconnect in grafs 
  of codifiers, whereas older version allowed only tree-like structures.
* API intoduced. It's now possible (recommended) to work with codifiers 
  using only functions, without referring codes tables.


Changes from 0.2 to 0.3
--------------------------------------------
* New version of STANDARD (0.3)


Changes from 0.3 to 0.4
--------------------------------------------
* Completely remade API.
* Added power to names of codes in different languages. Now they obey 
  uniqueness rules (same as codes.code_text does) in scopes of languages. 
* Code is now addressable by 4 types of keys:
   -- Simple code key               - not always enough to identify plain code
   -- Codified code key             - identify any code
   -- Simple code key by language   - extension of simple code key
   -- Codified code key by language - extension of codified code key 
* No more dependency from Language. Now the package codifies languages itself.
  Language package consumed. Future versions of packages, 
  that required Language will now require Codifier.


Changes from 0.4 to 0.5
--------------------------------------------
* Generalized "code_lngname_construction_input" -> "name_construction_input".
  Added hints, how to use provided sources as templates for administrative
  API fo any other child-table of "named_in_languages" ancestor-table.
* No more dependency from Name. Name package consumed. 
  Field "entity" of "names" table is now :: integer - FK to a code under 
  codifier "Entities". 
* Solved insufficient namespacing bug (it wasn't possible to call Codifier 
  function from other schema). 
* Added 2 sequences for codifiers "Languages" (9000-9499) and 
  "Entities" (9500-9999). Also added "new_code" function extension, 
  that accepts used-defined sequence for code ID generation. 


Changes from 0.5 to 0.5.1
--------------------------------------------
* Added function "optimize_acodekeyl", which grounds any key to contain IDs.
* Tables "names" and "named_in_languages" are now abstract - one can't 
  INSERT, UPDATE or DELETE with them. To put it that way, had to 
  remove FOREIGN KEYs from table "names" and "named_in_languages", because 
  their ON UPDATE CASCADE rules would conflict 
  with INSTEAD OF UPDATE DO NOTHING.

Changes from 0.5.1 to 0.5.2
--------------------------------------------
* Added functions "optimized_[a]codekey[l]_isit".

Changes from 0.5.2 to 0.5.3
--------------------------------------------
* Added functions:
        optimization_mode_for_acodekeyl(par_acodekeyl t_addressed_code_key_by_lng, par_determination_preference_mask integer, par_imperative_or_mask integer)
        optimize_acodekeyl(par_acodekeyl t_addressed_code_key_by_lng, par_determination_preference_mask integer, par_imperative_or_mask integer)
        optimize_acodekeyl(par_acodekeyl t_addressed_code_key_by_lng)

